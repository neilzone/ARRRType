create extension if not exists "pg_cron" with schema "public" version '1.4-1';

create sequence "public"."total_games_id_seq";

create table "public"."games" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "start_time" timestamp with time zone,
    "status" text not null,
    "text_id" bigint,
    "finishing_times" jsonb,
    "players" uuid[] not null,
    "player_active" jsonb not null,
    "heartbeat" jsonb
);


alter table "public"."games" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "website" text,
    "coins" bigint default 0,
    "last_unlocked_level" bigint,
    "last_round_wpm" jsonb,
    "last_round_gross_wpm" jsonb,
    "100_slow_words" jsonb,
    "last_slow_words" jsonb,
    "time_played" bigint,
    "games_played" bigint,
    "created_at" timestamp with time zone,
    "training_plan" jsonb,
    "avatar_id" integer default 15,
    "flag_id" integer default 1,
    "avatar_url" text,
    "wpm_buckets" integer[] default ARRAY[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    "accuracy_buckets" integer[] default ARRAY[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
);


alter table "public"."profiles" enable row level security;

create table "public"."texts" (
    "id" bigint not null,
    "text" text
);


alter table "public"."texts" enable row level security;

create table "public"."total_games" (
    "id" integer not null default nextval('total_games_id_seq'::regclass),
    "total_count" integer default 0,
    "total_time" bigint,
    "wpmbuckets" integer[] default ARRAY[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    "accuracybuckets" integer[] default ARRAY[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    "grosswpmbuckets" integer[] default ARRAY[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
);


alter table "public"."total_games" enable row level security;

create table "public"."user_stats" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid,
    "created_at" timestamp with time zone not null default now(),
    "wpm" bigint,
    "accuracy" bigint,
    "errors" jsonb,
    "totalOccurrences" jsonb,
    "mistakesMade" jsonb,
    "consistency" double precision,
    "grossWPM" bigint
);


alter table "public"."user_stats" enable row level security;

create table "public"."words" (
    "id" bigint,
    "3_letters" text
);


alter table "public"."words" enable row level security;

alter sequence "public"."total_games_id_seq" owned by "public"."total_games"."id";

CREATE UNIQUE INDEX games_pkey ON public.games USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX texts_pkey ON public.texts USING btree (id);

CREATE UNIQUE INDEX total_games_pkey ON public.total_games USING btree (id);

CREATE UNIQUE INDEX "userStats_pkey" ON public.user_stats USING btree (id);

alter table "public"."games" add constraint "games_pkey" PRIMARY KEY using index "games_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."texts" add constraint "texts_pkey" PRIMARY KEY using index "texts_pkey";

alter table "public"."total_games" add constraint "total_games_pkey" PRIMARY KEY using index "total_games_pkey";

alter table "public"."user_stats" add constraint "userStats_pkey" PRIMARY KEY using index "userStats_pkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."user_stats" add constraint "user_stats_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."user_stats" validate constraint "user_stats_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.clean_up_old_games()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    game_record games%ROWTYPE;
BEGIN
    FOR game_record IN SELECT * FROM games
    LOOP
        IF EXTRACT(EPOCH FROM NOW() - (game_record.created_at)) > 300 THEN
            DELETE FROM games WHERE id = game_record.id;
        ELSE
            -- Extract the timestamps from the heartbeat column and find the latest one
            PERFORM id FROM jsonb_array_elements(game_record.heartbeat) AS heartbeat
            WHERE EXTRACT(EPOCH FROM NOW() - (heartbeat->>'timestamp')::timestamp) > 300
            LIMIT 1;
            IF FOUND THEN
                DELETE FROM games WHERE id = game_record.id;
            END IF;
        END IF;
    END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.increment_total_games()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- This updates the first row's total_count in total_games table.
    -- Adjust the WHERE clause as needed for your specific use case.
    UPDATE public.total_games
    SET total_count = total_count + 1
    WHERE id = 1; -- Adjust this to target the correct row
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_heartbeat(game_id text, user_id text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    UPDATE games
    SET heartbeat = COALESCE(heartbeat, '[]'::jsonb) || jsonb_build_array(
        jsonb_build_object(
            'user_id', user_id, 
            'message', 'pong', 
            'timestamp', NOW()
        )
    )
    WHERE id = game_id::uuid;
END;
$function$
;

grant delete on table "public"."games" to "anon";

grant insert on table "public"."games" to "anon";

grant references on table "public"."games" to "anon";

grant select on table "public"."games" to "anon";

grant trigger on table "public"."games" to "anon";

grant truncate on table "public"."games" to "anon";

grant update on table "public"."games" to "anon";

grant delete on table "public"."games" to "authenticated";

grant insert on table "public"."games" to "authenticated";

grant references on table "public"."games" to "authenticated";

grant select on table "public"."games" to "authenticated";

grant trigger on table "public"."games" to "authenticated";

grant truncate on table "public"."games" to "authenticated";

grant update on table "public"."games" to "authenticated";

grant delete on table "public"."games" to "service_role";

grant insert on table "public"."games" to "service_role";

grant references on table "public"."games" to "service_role";

grant select on table "public"."games" to "service_role";

grant trigger on table "public"."games" to "service_role";

grant truncate on table "public"."games" to "service_role";

grant update on table "public"."games" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."texts" to "anon";

grant insert on table "public"."texts" to "anon";

grant references on table "public"."texts" to "anon";

grant select on table "public"."texts" to "anon";

grant trigger on table "public"."texts" to "anon";

grant truncate on table "public"."texts" to "anon";

grant update on table "public"."texts" to "anon";

grant delete on table "public"."texts" to "authenticated";

grant insert on table "public"."texts" to "authenticated";

grant references on table "public"."texts" to "authenticated";

grant select on table "public"."texts" to "authenticated";

grant trigger on table "public"."texts" to "authenticated";

grant truncate on table "public"."texts" to "authenticated";

grant update on table "public"."texts" to "authenticated";

grant delete on table "public"."texts" to "service_role";

grant insert on table "public"."texts" to "service_role";

grant references on table "public"."texts" to "service_role";

grant select on table "public"."texts" to "service_role";

grant trigger on table "public"."texts" to "service_role";

grant truncate on table "public"."texts" to "service_role";

grant update on table "public"."texts" to "service_role";

grant delete on table "public"."total_games" to "anon";

grant insert on table "public"."total_games" to "anon";

grant references on table "public"."total_games" to "anon";

grant select on table "public"."total_games" to "anon";

grant trigger on table "public"."total_games" to "anon";

grant truncate on table "public"."total_games" to "anon";

grant update on table "public"."total_games" to "anon";

grant delete on table "public"."total_games" to "authenticated";

grant insert on table "public"."total_games" to "authenticated";

grant references on table "public"."total_games" to "authenticated";

grant select on table "public"."total_games" to "authenticated";

grant trigger on table "public"."total_games" to "authenticated";

grant truncate on table "public"."total_games" to "authenticated";

grant update on table "public"."total_games" to "authenticated";

grant delete on table "public"."total_games" to "service_role";

grant insert on table "public"."total_games" to "service_role";

grant references on table "public"."total_games" to "service_role";

grant select on table "public"."total_games" to "service_role";

grant trigger on table "public"."total_games" to "service_role";

grant truncate on table "public"."total_games" to "service_role";

grant update on table "public"."total_games" to "service_role";

grant delete on table "public"."user_stats" to "anon";

grant insert on table "public"."user_stats" to "anon";

grant references on table "public"."user_stats" to "anon";

grant select on table "public"."user_stats" to "anon";

grant trigger on table "public"."user_stats" to "anon";

grant truncate on table "public"."user_stats" to "anon";

grant update on table "public"."user_stats" to "anon";

grant delete on table "public"."user_stats" to "authenticated";

grant insert on table "public"."user_stats" to "authenticated";

grant references on table "public"."user_stats" to "authenticated";

grant select on table "public"."user_stats" to "authenticated";

grant trigger on table "public"."user_stats" to "authenticated";

grant truncate on table "public"."user_stats" to "authenticated";

grant update on table "public"."user_stats" to "authenticated";

grant delete on table "public"."user_stats" to "service_role";

grant insert on table "public"."user_stats" to "service_role";

grant references on table "public"."user_stats" to "service_role";

grant select on table "public"."user_stats" to "service_role";

grant trigger on table "public"."user_stats" to "service_role";

grant truncate on table "public"."user_stats" to "service_role";

grant update on table "public"."user_stats" to "service_role";

grant delete on table "public"."words" to "anon";

grant insert on table "public"."words" to "anon";

grant references on table "public"."words" to "anon";

grant select on table "public"."words" to "anon";

grant trigger on table "public"."words" to "anon";

grant truncate on table "public"."words" to "anon";

grant update on table "public"."words" to "anon";

grant delete on table "public"."words" to "authenticated";

grant insert on table "public"."words" to "authenticated";

grant references on table "public"."words" to "authenticated";

grant select on table "public"."words" to "authenticated";

grant trigger on table "public"."words" to "authenticated";

grant truncate on table "public"."words" to "authenticated";

grant update on table "public"."words" to "authenticated";

grant delete on table "public"."words" to "service_role";

grant insert on table "public"."words" to "service_role";

grant references on table "public"."words" to "service_role";

grant select on table "public"."words" to "service_role";

grant trigger on table "public"."words" to "service_role";

grant truncate on table "public"."words" to "service_role";

grant update on table "public"."words" to "service_role";

create policy "Insert for all users"
on "public"."games"
as permissive
for insert
to public
with check (true);


create policy "Select for all users"
on "public"."games"
as permissive
for select
to public
using (true);


create policy "Insert (authenticated)"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Select (authenticated)"
on "public"."profiles"
as permissive
for select
to authenticated
using (true);


create policy "Update (authenticated)"
on "public"."profiles"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."texts"
as permissive
for select
to public
using (true);


create policy "Public (Update)"
on "public"."total_games"
as permissive
for update
to public
using (true)
with check (true);


create policy "Public (select)"
on "public"."total_games"
as permissive
for select
to public
using (true);


create policy "Delete (authenticated)"
on "public"."user_stats"
as permissive
for delete
to authenticated
using (true);


create policy "Insert (Authenticated)"
on "public"."user_stats"
as permissive
for insert
to authenticated
with check (true);


create policy "Select (Authenticated)"
on "public"."user_stats"
as permissive
for select
to authenticated
using (true);


create policy "Update (Authenticated)"
on "public"."user_stats"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable read access for all users"
on "public"."words"
as permissive
for select
to public
using (true);



